# Kafka Schema Registry MCP Demo Environment Configuration\n# GitHub OAuth Edition - Copy this file to .env and modify as needed\n\n# ===========================================\n# GitHub OAuth Configuration\n# ===========================================\n\n# Required: Create GitHub OAuth App at https://github.com/settings/developers\n# Application name: Kafka Schema Registry MCP Demo\n# Homepage URL: http://localhost:3000\n# Authorization callback URL: http://localhost:38000/auth/callback\n\nGITHUB_CLIENT_ID=your_github_client_id_here\nGITHUB_CLIENT_SECRET=your_github_client_secret_here\n\n# GitHub Organization (optional - for team-based access control)\nGITHUB_ORG=kafka-schema-mcp-demos\n\n# GitHub Team Mapping (optional - requires organization)\nGITHUB_TEAM_READ=community     # Team with read access\nGITHUB_TEAM_WRITE=developers   # Team with write access  \nGITHUB_TEAM_ADMIN=maintainers  # Team with admin access\n\n# ===========================================\n# Development Mode (for testing)\n# ===========================================\n\n# Set to true to bypass OAuth for local development\nDEV_MODE=false\n\n# Personal Access Token for development (optional)\n# Create at: https://github.com/settings/personal-access-tokens\n# Scopes needed: repo, public_repo, admin:org (if using organization)\nDEV_GITHUB_TOKEN=ghp_your_personal_access_token_here\n\n# ===========================================\n# Multi-Registry Configuration\n# ===========================================\n\n# Development Registry\nSCHEMA_REGISTRY_NAME_1=development\nSCHEMA_REGISTRY_URL_1=http://dev-registry:8081\nSCHEMA_REGISTRY_USER_1=\nSCHEMA_REGISTRY_PASSWORD_1=\nREADONLY_1=false\n\n# Staging Registry\nSCHEMA_REGISTRY_NAME_2=staging\nSCHEMA_REGISTRY_URL_2=http://staging-registry:8081\nSCHEMA_REGISTRY_USER_2=\nSCHEMA_REGISTRY_PASSWORD_2=\nREADONLY_2=false\n\n# Production Registry (Read-only for safety)\nSCHEMA_REGISTRY_NAME_3=production\nSCHEMA_REGISTRY_URL_3=http://prod-registry:8081\nSCHEMA_REGISTRY_USER_3=\nSCHEMA_REGISTRY_PASSWORD_3=\nREADONLY_3=true\n\n# ===========================================\n# Demo UI Configuration\n# ===========================================\n\nREACT_APP_MCP_SERVER_URL=http://localhost:38000\nREACT_APP_AUTH_PROVIDER=github\n\n# ===========================================\n# Monitoring Configuration\n# ===========================================\n\n# Grafana (also supports GitHub OAuth)\nGF_SECURITY_ADMIN_PASSWORD=admin123\n\n# ===========================================\n# External URLs (for cloud deployment)\n# ===========================================\n\n# Public URLs when deployed to cloud\n# PUBLIC_MCP_URL=https://demo.kafka-schema-mcp.com\n# PUBLIC_UI_URL=https://ui.kafka-schema-mcp.com\n# GITHUB_CALLBACK_URL=https://demo.kafka-schema-mcp.com/auth/callback\n\n# ===========================================\n# Advanced Configuration\n# ===========================================\n\n# Log levels\nLOG_LEVEL=INFO\nKAFKA_LOG_LEVEL=WARN\n\n# Performance tuning\nKAFKA_HEAP_OPTS=-Xms512M -Xmx1G\nSCHEMA_REGISTRY_HEAP_OPTS=-Xms256M -Xmx512M\n\n# Security settings (for production)\n# SSL_ENABLED=true\n# SSL_CERT_PATH=/etc/ssl/certs\n# SSL_KEY_PATH=/etc/ssl/private\n\n# ===========================================\n# GitHub OAuth Setup Instructions\n# ===========================================\n\n# 1. Go to https://github.com/settings/developers\n# 2. Click \"New OAuth App\"\n# 3. Fill in:\n#    - Application name: Kafka Schema Registry MCP Demo\n#    - Homepage URL: http://localhost:3000\n#    - Authorization callback URL: http://localhost:38000/auth/callback\n# 4. Copy Client ID and Client Secret to this file\n# 5. (Optional) Create GitHub organization: kafka-schema-mcp-demos\n# 6. (Optional) Create teams: community, developers, maintainers\n# 7. Run: docker-compose -f docker-compose.github-oauth.yml up -d\n\n# ===========================================\n# GitHub Permissions Mapping\n# ===========================================\n\n# GitHub Scope -> MCP Permission\n# public_repo  -> read   (view schemas, subjects, configurations)\n# repo         -> write  (register schemas, update configs + read)\n# admin:org    -> admin  (delete subjects, manage registries + write + read)\n\n# ===========================================\n# Benefits of GitHub OAuth\n# ===========================================\n\n# ✅ No separate OAuth provider (Keycloak) needed\n# ✅ Developers already have GitHub accounts\n# ✅ Familiar OAuth flow\n# ✅ Organization/team integration\n# ✅ Faster startup time\n# ✅ Lower resource usage\n# ✅ Production-ready OAuth provider\n# ✅ Built-in audit logging\n# ✅ Fine-grained permissions"