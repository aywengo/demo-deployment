#!/bin/bash\n\n# GitHub OAuth Setup Script for Kafka Schema Registry MCP Demo\n# This script helps configure GitHub OAuth for the demo environment\n\nset -e\n\necho \"\ud83d\ude80 Kafka Schema Registry MCP Demo - GitHub OAuth Setup\"\necho \"==========================================================\"\necho \"\"\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Function to print colored output\nprint_info() {\n    echo -e \"${BLUE}ℹ️  $1${NC}\"\n}\n\nprint_success() {\n    echo -e \"${GREEN}✅ $1${NC}\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}⚠️  $1${NC}\"\n}\n\nprint_error() {\n    echo -e \"${RED}❌ $1${NC}\"\n}\n\n# Check if required tools are installed\ncheck_requirements() {\n    print_info \"Checking requirements...\"\n    \n    if ! command -v docker &> /dev/null; then\n        print_error \"Docker is required but not installed. Please install Docker first.\"\n        exit 1\n    fi\n    \n    if ! command -v docker-compose &> /dev/null; then\n        print_error \"Docker Compose is required but not installed. Please install Docker Compose first.\"\n        exit 1\n    fi\n    \n    if ! command -v curl &> /dev/null; then\n        print_error \"curl is required but not installed. Please install curl first.\"\n        exit 1\n    fi\n    \n    print_success \"All requirements satisfied\"\n}\n\n# Guide user through GitHub OAuth app creation\nsetup_github_oauth() {\n    print_info \"Setting up GitHub OAuth Application...\"\n    echo \"\"\n    \n    echo \"📋 Please create a GitHub OAuth App with these settings:\"\n    echo \"\"\n    echo \"1. Go to: https://github.com/settings/developers\"\n    echo \"2. Click 'New OAuth App'\"\n    echo \"3. Fill in the following:\"\n    echo \"   - Application name: Kafka Schema Registry MCP Demo\"\n    echo \"   - Homepage URL: http://localhost:3000\"\n    echo \"   - Authorization callback URL: http://localhost:38000/auth/callback\"\n    echo \"   - Description: Demo showcasing MCP server with GitHub OAuth\"\n    echo \"\"\n    \n    read -p \"Press Enter when you've created the OAuth app...\"\n    \n    echo \"\"\n    print_info \"Now we need your OAuth credentials...\"\n    \n    # Get GitHub OAuth credentials\n    read -p \"Enter your GitHub Client ID: \" GITHUB_CLIENT_ID\n    read -s -p \"Enter your GitHub Client Secret: \" GITHUB_CLIENT_SECRET\n    echo \"\"\n    \n    # Optional organization setup\n    read -p \"Enter your GitHub organization name (optional, press Enter to skip): \" GITHUB_ORG\n    if [ -z \"$GITHUB_ORG\" ]; then\n        GITHUB_ORG=\"kafka-schema-mcp-demos\"\n        print_warning \"Using default organization: $GITHUB_ORG\"\n    fi\n    \n    # Validate credentials\n    if [ -z \"$GITHUB_CLIENT_ID\" ] || [ -z \"$GITHUB_CLIENT_SECRET\" ]; then\n        print_error \"GitHub Client ID and Secret are required!\"\n        exit 1\n    fi\n    \n    print_success \"GitHub OAuth credentials collected\"\n}\n\n# Create environment file\ncreate_env_file() {\n    print_info \"Creating environment configuration...\"\n    \n    # Create .env file from template\n    if [ ! -f \".env.github-oauth\" ]; then\n        print_error \".env.github-oauth template not found!\"\n        exit 1\n    fi\n    \n    cp .env.github-oauth .env\n    \n    # Update with user's credentials\n    sed -i.bak \"s/your_github_client_id_here/$GITHUB_CLIENT_ID/g\" .env\n    sed -i.bak \"s/your_github_client_secret_here/$GITHUB_CLIENT_SECRET/g\" .env\n    sed -i.bak \"s/kafka-schema-mcp-demos/$GITHUB_ORG/g\" .env\n    \n    # Clean up backup file\n    rm -f .env.bak\n    \n    print_success \"Environment file created (.env)\"\n}\n\n# Start demo environment\nstart_demo() {\n    print_info \"Starting demo environment...\"\n    \n    # Check if services are already running\n    if docker-compose -f docker-compose.github-oauth.yml ps | grep -q \"Up\"; then\n        print_warning \"Some services are already running. Stopping them first...\"\n        docker-compose -f docker-compose.github-oauth.yml down\n    fi\n    \n    # Start services\n    print_info \"Starting services (this may take 2-3 minutes)...\"\n    docker-compose -f docker-compose.github-oauth.yml up -d\n    \n    # Wait for services to be ready\n    print_info \"Waiting for services to be ready...\"\n    \n    for i in {1..60}; do\n        if curl -s http://localhost:38000/health > /dev/null 2>&1; then\n            print_success \"MCP Server is ready!\"\n            break\n        fi\n        \n        if [ $i -eq 60 ]; then\n            print_error \"Services failed to start within 5 minutes\"\n            print_info \"Check logs with: docker-compose -f docker-compose.github-oauth.yml logs\"\n            exit 1\n        fi\n        \n        sleep 5\n        echo -n \".\"\n    done\n    \n    echo \"\"\n    print_success \"Demo environment is running!\"\n}\n\n# Load demo data\nload_demo_data() {\n    print_info \"Loading demo schemas...\"\n    \n    if [ -f \"./scripts/setup-demo-data.sh\" ]; then\n        chmod +x ./scripts/setup-demo-data.sh\n        ./scripts/setup-demo-data.sh\n        print_success \"Demo data loaded successfully\"\n    else\n        print_warning \"Demo data script not found, skipping...\"\n    fi\n}\n\n# Test the setup\ntest_setup() {\n    print_info \"Testing the demo setup...\"\n    \n    # Test health endpoint\n    if curl -s http://localhost:38000/health | grep -q \"healthy\"; then\n        print_success \"✅ MCP Server health check passed\"\n    else\n        print_error \"❌ MCP Server health check failed\"\n    fi\n    \n    # Test registries endpoint\n    if curl -s http://localhost:38000/registries | grep -q \"development\"; then\n        print_success \"✅ Multi-registry setup verified\"\n    else\n        print_error \"❌ Multi-registry setup failed\"\n    fi\n    \n    # Test OAuth info endpoint\n    if curl -s http://localhost:38000/auth/info | grep -q \"github\"; then\n        print_success \"✅ GitHub OAuth integration verified\"\n    else\n        print_error \"❌ GitHub OAuth integration failed\"\n    fi\n}\n\n# Show access information\nshow_access_info() {\n    echo \"\"\n    print_success \"🎉 Demo setup complete!\"\n    echo \"\"\n    echo \"📱 Access your demo at:\"\n    echo \"   🌐 Demo UI:        http://localhost:3000\"\n    echo \"   🔧 MCP Server:     http://localhost:38000\"\n    echo \"   📊 Monitoring:     http://localhost:9090\"\n    echo \"   📈 Dashboards:     http://localhost:3001 (admin/admin123)\"\n    echo \"\"\n    echo \"🔐 GitHub OAuth Configuration:\"\n    echo \"   📱 Login URL:      http://localhost:3000/login\"\n    echo \"   🏢 Organization:   $GITHUB_ORG\"\n    echo \"   🔑 Client ID:      $GITHUB_CLIENT_ID\"\n    echo \"\"\n    echo \"🧪 Test the API:\"\n    echo \"   curl http://localhost:38000/health\"\n    echo \"   curl http://localhost:38000/registries\"\n    echo \"   curl http://localhost:38000/auth/info\"\n    echo \"\"\n    echo \"📚 Next steps:\"\n    echo \"   1. Visit http://localhost:3000 and sign in with GitHub\"\n    echo \"   2. Try the demo scenarios in the documentation\"\n    echo \"   3. Integrate with Claude Desktop using the provided config\"\n    echo \"   4. Deploy to production when ready!\"\n    echo \"\"\n}\n\n# Claude Desktop configuration\nshow_claude_config() {\n    print_info \"Claude Desktop Configuration\"\n    echo \"\"\n    echo \"📋 Add this to your Claude Desktop config:\"\n    echo \"\"\n    \n    cat << EOF\n{\n  \"mcpServers\": {\n    \"kafka-schema-registry-demo\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\", \"--rm\", \"-i\",\n        \"--network\", \"kafka-schema-mcp-demo\",\n        \"-e\", \"ENABLE_AUTH=true\",\n        \"-e\", \"AUTH_PROVIDER=github\",\n        \"-e\", \"GITHUB_CLIENT_ID=$GITHUB_CLIENT_ID\",\n        \"-e\", \"GITHUB_CLIENT_SECRET=$GITHUB_CLIENT_SECRET\",\n        \"-e\", \"GITHUB_ORG=$GITHUB_ORG\",\n        \"-e\", \"SCHEMA_REGISTRY_NAME_1=development\",\n        \"-e\", \"SCHEMA_REGISTRY_URL_1=http://dev-registry:8081\",\n        \"-e\", \"SCHEMA_REGISTRY_NAME_2=staging\",\n        \"-e\", \"SCHEMA_REGISTRY_URL_2=http://staging-registry:8081\",\n        \"-e\", \"SCHEMA_REGISTRY_NAME_3=production\",\n        \"-e\", \"SCHEMA_REGISTRY_URL_3=http://prod-registry:8081\",\n        \"-e\", \"READONLY_3=true\",\n        \"aywengo/kafka-schema-reg-mcp:stable\"\n      ]\n    }\n  }\n}\nEOF\n    \n    echo \"\"\n    echo \"💾 Save this to:\"\n    echo \"   macOS: ~/Library/Application Support/Claude/claude_desktop_config.json\"\n    echo \"   Linux: ~/.config/claude-desktop/config.json\"\n    echo \"\"\n}\n\n# Error handling\ntrap 'print_error \"Setup interrupted!\"; exit 1' INT TERM\n\n# Main execution\nmain() {\n    check_requirements\n    setup_github_oauth\n    create_env_file\n    start_demo\n    load_demo_data\n    test_setup\n    show_access_info\n    show_claude_config\n    \n    print_success \"🚀 GitHub OAuth demo setup complete!\"\n}\n\n# Check if script is being run directly\nif [ \"${BASH_SOURCE[0]}\" -ef \"$0\" ]; then\n    main \"$@\"\nfi"